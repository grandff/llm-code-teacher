소스 코드 변경 사항 보고서
1. 개요
이 보고서는 file_server 프로젝트의 Streamlit 애플리케이션 소스 코드 변경 사항을 설명합니다. 특히, 로깅 설정을 JSON 파일로 분리하고, 코드에서 로깅을 보다 유연하게 관리할 수 있도록 변경했습니다. 또한, 데이터 프레임의 인덱스가 1부터 시작하도록 수정했습니다.

2. 변경 사항
2.1. 로깅 설정 분리
변경 전:

로깅 설정이 코드 내에 하드코딩되어 있었으며, 로그 레벨과 파일 경로를 코드에서 직접 설정했습니다.
python
코드 복사
logging.basicConfig(
    level=logging.INFO,  # 로그 수준 설정
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/supervisor/streamlit.log'),  # 로그 파일 경로
        logging.StreamHandler()  # 콘솔에 로그 출력
    ]
)
변경 후:

로깅 설정을 logging_config.json 파일로 분리하여 설정을 중앙화하고 관리할 수 있도록 했습니다. logging_config.json 파일의 경로는 config/ 디렉터리에 위치합니다.

config/logging_config.json 파일의 내용:

json
코드 복사
{
  "version": 1,
  "disable_existing_loggers": false,
  "formatters": {
    "default": {
      "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    }
  },
  "handlers": {
    "file": {
      "class": "logging.FileHandler",
      "filename": "/var/log/supervisor/streamlit.log",
      "formatter": "default"
    },
    "console": {
      "class": "logging.StreamHandler",
      "formatter": "default"
    }
  },
  "root": {
    "handlers": ["file", "console"],
    "level": "INFO"
  }
}
애플리케이션에서 로깅 설정을 읽어들이는 코드:
python
코드 복사
import logging.config
import yaml
import os

# YAML 파일 경로
logging_config_file = "config/logging_config.json"

# JSON 파일에서 로그 설정 읽기
if os.path.exists(logging_config_file):
    with open(logging_config_file, 'r') as f:
        config = json.load(f)
        logging.config.dictConfig(config)
else:
    logging.basicConfig(level=logging.INFO)
    print(f"Warning: 로그 설정 파일을 찾을 수 없습니다. 기본 설정으로 시작합니다.")

# logger 설정
logger = logging.getLogger(__name__)
2.2. 데이터프레임 인덱스 수정
변경 전:

데이터프레임의 인덱스가 기본값인 0부터 시작했습니다.
python
코드 복사
data_df = pd.DataFrame(data)
st.markdown(data_df.to_html(escape=False), unsafe_allow_html=True)
변경 후:

데이터프레임의 인덱스가 1부터 시작하도록 수정했습니다. 이를 통해 사용자에게 더 직관적인 데이터 표시가 가능해졌습니다.
python
코드 복사
data_df = pd.DataFrame(data)
data_df.index = range(1, len(data_df) + 1)
st.markdown(data_df.to_html(escape=False), unsafe_allow_html=True)
3. 변경 사항의 효과
3.1. 로깅 설정의 유연성
중앙화된 로깅 설정: JSON 파일을 통해 로그 레벨, 포맷, 파일 경로 등을 쉽게 관리할 수 있으며, 코드 변경 없이 설정을 조정할 수 있습니다.
유지보수 용이성: 로깅 설정이 코드에서 분리되었으므로, 유지보수가 용이해졌습니다.
3.2. 데이터프레임 표시 개선
직관적인 인덱스: 데이터프레임의 인덱스가 1부터 시작함으로써 사용자에게 더 친숙한 형식을 제공합니다. 이는 데이터 분석 및 보고서 작성 시 유용합니다.
4. 결론
이번 소스 코드 변경을 통해 로깅 설정의 유연성과 데이터프레임 표시의 직관성을 개선하였습니다. 로깅 설정의 중앙화는 애플리케이션의 유지보수를 용이하게 하며, 데이터프레임 인덱스 수정은 사용자 경험을 개선합니다. 향후, 추가적인 기능 개선과 함께 이러한 변경 사항이 애플리케이션의 품질을 더욱 높일 것으로 기대됩니다.

